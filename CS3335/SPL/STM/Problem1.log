Page   1  Problem1.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0000               1  ;--------------------------------------------------------------
0X0000               2  ; Problem1.stm
0X0000               3  ;--------------------------------------------------------------
0X0000               4  ; SVC numbers
0X0000               5  SVC_DONOTHING          EQU       0D0                  ; force context switch
0X0000               6  SVC_TERMINATE          EQU       0D1
0X0000               7  SVC_READ_INTEGER       EQU       0D10
0X0000               8  SVC_WRITE_INTEGER      EQU       0D11
0X0000               9  SVC_READ_FLOAT         EQU       0D20
0X0000              10  SVC_WRITE_FLOAT        EQU       0D21
0X0000              11  SVC_READ_BOOLEAN       EQU       0D30
0X0000              12  SVC_WRITE_BOOLEAN      EQU       0D31
0X0000              13  SVC_READ_CHARACTER     EQU       0D40
0X0000              14  SVC_WRITE_CHARACTER    EQU       0D41
0X0000              15  SVC_WRITE_ENDL         EQU       0D42
0X0000              16  SVC_READ_STRING        EQU       0D50
0X0000              17  SVC_WRITE_STRING       EQU       0D51
0X0000              18  SVC_INITIALIZE_HEAP    EQU       0D90
0X0000              19  SVC_ALLOCATE_BLOCK     EQU       0D91
0X0000              20  SVC_DEALLOCATE_BLOCK   EQU       0D92
0X0000              21  
0X0000              22                         ORG       0X0000
0X0000              23  
0X0000  800003      24                         JMP       PROGRAMMAIN
0X0003              25  ;    1 ;------------------------------------------------------------
0X0003              26  ;    2 ; Dr. Art Hanna
0X0003              27  ;    3 ; SPL Programming, Problem #1
0X0003              28  ;    4 ; Problem1.spl
0X0003              29  ;    5 ;------------------------------------------------------------
0X0003              30  ;    6 PROGRAM
0X0003              31  ;    7    VAR i: INT.
0X0003              32  ; **** =========
0X0003              33  ; **** PROGRAM module (   6)
0X0003              34  ; **** =========
0X0003              35  PROGRAMMAIN            EQU       *
0X0003  0100FFFE    36                         PUSH      #RUNTIMESTACK        ; set SP
0X0007  0A          37                         POPSP     
0X0008  020100BB    38                         PUSHA     STATICDATA           ; set SB
0X000C  0C          39                         POPSB     
0X000D  01000169    40                         PUSH      #HEAPBASE            ; initialize heap
0X0011  01001000    41                         PUSH      #HEAPSIZE
0X0015  FF005A      42                         SVC       #SVC_INITIALIZE_HEAP
0X0018  A0002C      43                         CALL      PROGRAMBODY0010
0X001B  020A0000    44                         PUSHA     SB:0D0
0X001F  FF0033      45                         SVC       #SVC_WRITE_STRING
0X0022  FF002A      46                         SVC       #SVC_WRITE_ENDL
0X0025  01000000    47                         PUSH      #0D0                 ; terminate with status = 0
0X0029  FF0001      48                         SVC       #SVC_TERMINATE
0X002C              49  
0X002C              50  PROGRAMBODY0010        EQU       *
0X002C              51  ;    8    VAR n: INT.
0X002C              52  ;    9 
0X002C              53  ;   10    i := 0.
0X002C              54  ;   11    
0X002C              55  ; **** assignment statement (  10)
0X002C  020A001C    56                         PUSHA     SB:0D28
Page   2  Problem1.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0030              57  ;   12    INPUT "n? " n.
0X0030  01000000    58                         PUSH      #0D0
0X0034  06          59                         MAKEDUP   
0X0035  03050002    60                         POP       @SP:0D2
0X0039  05          61                         SWAP      
0X003A  040001      62                         DISCARD   #0D1
0X003D  040001      63                         DISCARD   #0D1
0X0040              64  ;   13    DO WHILE ( i < n )
0X0040              65  ; **** INPUT statement (  12)
0X0040  020A001E    66                         PUSHA     SB:0D30
0X0044  FF0033      67                         SVC       #SVC_WRITE_STRING
0X0047  020A001D    68                         PUSHA     SB:0D29
0X004B  FF000A      69                         SVC       #SVC_READ_INTEGER
0X004E  03050001    70                         POP       @SP:0D1
0X0052  040001      71                         DISCARD   #0D1
0X0055              72  ; **** DO-WHILE statement (  13)
0X0055              73  D0020                  EQU       *
0X0055              74  ;   14       PRINT "Arthur Daryl Hanna",ENDL.
0X0055  010A001C    75                         PUSH      SB:0D28
0X0059  010A001D    76                         PUSH      SB:0D29
0X005D  70          77                         CMPI      
0X005E  810068      78                         JMPL      T0040
0X0061  01000000    79                         PUSH      #0X0000
0X0065  80006C      80                         JMP       E0050
0X0068  0100FFFF    81  T0040                  PUSH      #0XFFFF
0X006C              82  E0050                  EQU       *
0X006C  74          83                         SETT      
0X006D  040001      84                         DISCARD   #0D1
0X0070  8E0099      85                         JMPNT     E0030
0X0073              86  ; **** PRINT statement (  14)
0X0073              87  ;   15       i := i+1.
0X0073  020A0023    88                         PUSHA     SB:0D35
0X0077  FF0033      89                         SVC       #SVC_WRITE_STRING
0X007A  FF002A      90                         SVC       #SVC_WRITE_ENDL
0X007D              91  ; **** assignment statement (  15)
0X007D  020A001C    92                         PUSHA     SB:0D28
0X0081              93  ;   16    END
0X0081  010A001C    94                         PUSH      SB:0D28
0X0085              95  ;   17 END
0X0085  01000001    96                         PUSH      #0D1
0X0089              97  ;   18 
0X0089  20          98                         ADDI      
0X008A  06          99                         MAKEDUP   
0X008B  03050002   100                         POP       @SP:0D2
0X008F  05         101                         SWAP      
0X0090  040001     102                         DISCARD   #0D1
0X0093  040001     103                         DISCARD   #0D1
0X0096  800055     104                         JMP       D0020
0X0099             105  E0030                  EQU       *
0X0099  A1         106                         RETURN    
0X009A             107  ; **** =========
0X009A             108  ; **** END (  17)
0X009A             109  ; **** =========
0X009A             110  
0X009A             111  ;------------------------------------------------------------
0X009A             112  ; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
Page   3  Problem1.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X009A             113  ;------------------------------------------------------------
0X009A             114  HANDLERUNTIMEERROR     EQU       *
0X009A  FF002A     115                         SVC       #SVC_WRITE_ENDL
0X009D  020A0037   116                         PUSHA     SB:0D55
0X00A1  FF0033     117                         SVC       #SVC_WRITE_STRING
0X00A4  FF000B     118                         SVC       #SVC_WRITE_INTEGER
0X00A7  020A0049   119                         PUSHA     SB:0D73
0X00AB  FF0033     120                         SVC       #SVC_WRITE_STRING
0X00AE  FF000B     121                         SVC       #SVC_WRITE_INTEGER
0X00B1  FF002A     122                         SVC       #SVC_WRITE_ENDL
0X00B4  01000001   123                         PUSH      #0D1
0X00B8  FF0001     124                         SVC       #SVC_TERMINATE
0X00BB             125  
0X00BB             126  ;------------------------------------------------------------
0X00BB             127  ; Static allocation of global data and PROGRAM module data
0X00BB             128  ;------------------------------------------------------------
0X00BB             129  STATICDATA             EQU       *
0X00BB  001A001A   130                         DS        "Normal program termination"
0X00BF  004E006F
0X00C3  0072006D
0X00C7  0061006C
0X00CB  00200070
0X00CF  0072006F
0X00D3  00670072
0X00D7  0061006D
0X00DB  00200074
0X00DF  00650072
0X00E3  006D0069
0X00E7  006E0061
0X00EB  00740069
0X00EF  006F006E
0X00F3             131                         RW        0D1                  ; i
0X00F5             132                         RW        0D1                  ; n
0X00F7  00030003   133                         DS        "n? "
0X00FB  006E003F
0X00FF  0020    
0X0101  00120012   134                         DS        "Arthur Daryl Hanna"
0X0105  00410072
0X0109  00740068
0X010D  00750072
0X0111  00200044
0X0115  00610072
0X0119  0079006C
0X011D  00200048
0X0121  0061006E
0X0125  006E0061
0X0129  00100010   135                         DS        "Run-time error #"
0X012D  00520075
0X0131  006E002D
0X0135  00740069
0X0139  006D0065
0X013D  00200065
0X0141  00720072
0X0145  006F0072
0X0149  00200023
0X014D  000C000C   136                         DS        " near line #"
Page   4  Problem1.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0151  0020006E
0X0155  00650061
0X0159  00720020
0X015D  006C0069
0X0161  006E0065
0X0165  00200023
0X0169             137  
0X0169             138  ;------------------------------------------------------------
0X0169             139  ; Heap space for dynamic memory allocation (to support future SPL syntax)
0X0169             140  ;------------------------------------------------------------
0X0169             141  HEAPBASE               EQU       *
0X0169             142  HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words
0X0169             143  
0X0169             144  ;------------------------------------------------------------
0X0169             145  ; Run-time stack
0X0169             146  ;------------------------------------------------------------
0X0169             147  RUNTIMESTACK           EQU       0XFFFE


  PC   SP TOS0 TOS1 TOS2 mnemonic  information
---- ---- ---- ---- ---- --------- ----------------------------------------------
0000 FFFE                 JMP       0X0003
0003 FFFE                 PUSH      #memory[EA = 0X0005] = 0XFFFE
0007 FFFC FFFE            POPSP     SP = 0XFFFE
0008 FFFE                 PUSHA     memory[EA = 0X00BB]
000C FFFC 00BB            POPSB     SB = 0X00BB
000D FFFE                 PUSH      #memory[EA = 0X000F] = 0X0169
0011 FFFC 0169            PUSH      #memory[EA = 0X0013] = 0X1000
-------------------------------------------------------------
FREE nodes list
   0X0169:0X1168(0X0FFC)
-------------------------------------------------------------
0015 FFFA 1000 0169       SVC       #90 initialize heap, heapBase = 0X0169, heapSize = 0X1000 words
0018 FFFE                 CALL      0X002C return to 0X001B
002C FFFC 001B            PUSHA     SB( 28) memory[EA = 0X00F3]
0030 FFFA 00F3 001B       PUSH      #memory[EA = 0X0032] = 0X0000
0034 FFF8 0000 00F3  001B MAKEDUP   duplicate 0X0000
0035 FFF6 0000 0000  00F3 POP       @SP(  2) memory[EA = 0X00F3 = memory[0XFFFC]] = 0X0000
0039 FFF8 0000 00F3  001B SWAP      0X00F3 <--> 0X0000
003A FFF8 00F3 0000  001B DISCARD   #1 words from top-of-stack
003D FFFA 0000 001B       DISCARD   #1 words from top-of-stack
0040 FFFC 001B            PUSHA     SB( 30) memory[EA = 0X00F7]
0044 FFFA 00F7 001B       SVC       #51 write string
0047 FFFC 001B            PUSHA     SB( 29) memory[EA = 0X00F5]
n? 5
004B FFFA 00F5 001B       SVC       #10 read integer 0X0005
004E FFF8 0005 00F5  001B POP       @SP(  1) memory[EA = 0X00F5 = memory[0XFFFC]] = 0X0005
0052 FFFA 00F5 001B       DISCARD   #1 words from top-of-stack
0055 FFFC 001B            PUSH      SB( 28) memory[EA = 0X00F3] = 0X0000
0059 FFFA 0000 001B       PUSH      SB( 29) memory[EA = 0X00F5] = 0X0005
005D FFF8 0005 0000  001B CMPI      0X0000 ? 0X0005 LEG = 100
005E FFFC 001B            JMPL      0X0068 LEG = 100
0068 FFFC 001B            PUSH      #memory[EA = 0X006A] = 0XFFFF
006C FFFA FFFF 001B       SETT      T = 1
006D FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
0070 FFFC 001B            JMPNT     0X0099 T = 1
0073 FFFC 001B            PUSHA     SB( 35) memory[EA = 0X0101]
0077 FFFA 0101 001B       SVC       #51 write string
Arthur Daryl Hanna
007A FFFC 001B            SVC       #42 write ENDL
007D FFFC 001B            PUSHA     SB( 28) memory[EA = 0X00F3]
0081 FFFA 00F3 001B       PUSH      SB( 28) memory[EA = 0X00F3] = 0X0000
0085 FFF8 0000 00F3  001B PUSH      #memory[EA = 0X0087] = 0X0001
0089 FFF6 0001 0000  00F3 ADDI      0X0001 = 0X0000 + 0X0001
008A FFF8 0001 00F3  001B MAKEDUP   duplicate 0X0001
008B FFF6 0001 0001  00F3 POP       @SP(  2) memory[EA = 0X00F3 = memory[0XFFFC]] = 0X0001
008F FFF8 0001 00F3  001B SWAP      0X00F3 <--> 0X0001
0090 FFF8 00F3 0001  001B DISCARD   #1 words from top-of-stack
0093 FFFA 0001 001B       DISCARD   #1 words from top-of-stack
0096 FFFC 001B            JMP       0X0055
0055 FFFC 001B            PUSH      SB( 28) memory[EA = 0X00F3] = 0X0001
0059 FFFA 0001 001B       PUSH      SB( 29) memory[EA = 0X00F5] = 0X0005
005D FFF8 0005 0001  001B CMPI      0X0001 ? 0X0005 LEG = 100
005E FFFC 001B            JMPL      0X0068 LEG = 100
0068 FFFC 001B            PUSH      #memory[EA = 0X006A] = 0XFFFF
006C FFFA FFFF 001B       SETT      T = 1
006D FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
0070 FFFC 001B            JMPNT     0X0099 T = 1
0073 FFFC 001B            PUSHA     SB( 35) memory[EA = 0X0101]
0077 FFFA 0101 001B       SVC       #51 write string
Arthur Daryl Hanna
007A FFFC 001B            SVC       #42 write ENDL
007D FFFC 001B            PUSHA     SB( 28) memory[EA = 0X00F3]
0081 FFFA 00F3 001B       PUSH      SB( 28) memory[EA = 0X00F3] = 0X0001
0085 FFF8 0001 00F3  001B PUSH      #memory[EA = 0X0087] = 0X0001
0089 FFF6 0001 0001  00F3 ADDI      0X0002 = 0X0001 + 0X0001
008A FFF8 0002 00F3  001B MAKEDUP   duplicate 0X0002
008B FFF6 0002 0002  00F3 POP       @SP(  2) memory[EA = 0X00F3 = memory[0XFFFC]] = 0X0002
008F FFF8 0002 00F3  001B SWAP      0X00F3 <--> 0X0002
0090 FFF8 00F3 0002  001B DISCARD   #1 words from top-of-stack
0093 FFFA 0002 001B       DISCARD   #1 words from top-of-stack
0096 FFFC 001B            JMP       0X0055
0055 FFFC 001B            PUSH      SB( 28) memory[EA = 0X00F3] = 0X0002
0059 FFFA 0002 001B       PUSH      SB( 29) memory[EA = 0X00F5] = 0X0005
005D FFF8 0005 0002  001B CMPI      0X0002 ? 0X0005 LEG = 100
005E FFFC 001B            JMPL      0X0068 LEG = 100
0068 FFFC 001B            PUSH      #memory[EA = 0X006A] = 0XFFFF
006C FFFA FFFF 001B       SETT      T = 1
006D FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
0070 FFFC 001B            JMPNT     0X0099 T = 1
0073 FFFC 001B            PUSHA     SB( 35) memory[EA = 0X0101]
0077 FFFA 0101 001B       SVC       #51 write string
Arthur Daryl Hanna
007A FFFC 001B            SVC       #42 write ENDL
007D FFFC 001B            PUSHA     SB( 28) memory[EA = 0X00F3]
0081 FFFA 00F3 001B       PUSH      SB( 28) memory[EA = 0X00F3] = 0X0002
0085 FFF8 0002 00F3  001B PUSH      #memory[EA = 0X0087] = 0X0001
0089 FFF6 0001 0002  00F3 ADDI      0X0003 = 0X0002 + 0X0001
008A FFF8 0003 00F3  001B MAKEDUP   duplicate 0X0003
008B FFF6 0003 0003  00F3 POP       @SP(  2) memory[EA = 0X00F3 = memory[0XFFFC]] = 0X0003
008F FFF8 0003 00F3  001B SWAP      0X00F3 <--> 0X0003
0090 FFF8 00F3 0003  001B DISCARD   #1 words from top-of-stack
0093 FFFA 0003 001B       DISCARD   #1 words from top-of-stack
0096 FFFC 001B            JMP       0X0055
0055 FFFC 001B            PUSH      SB( 28) memory[EA = 0X00F3] = 0X0003
0059 FFFA 0003 001B       PUSH      SB( 29) memory[EA = 0X00F5] = 0X0005
005D FFF8 0005 0003  001B CMPI      0X0003 ? 0X0005 LEG = 100
005E FFFC 001B            JMPL      0X0068 LEG = 100
0068 FFFC 001B            PUSH      #memory[EA = 0X006A] = 0XFFFF
006C FFFA FFFF 001B       SETT      T = 1
006D FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
0070 FFFC 001B            JMPNT     0X0099 T = 1
0073 FFFC 001B            PUSHA     SB( 35) memory[EA = 0X0101]
0077 FFFA 0101 001B       SVC       #51 write string
Arthur Daryl Hanna
007A FFFC 001B            SVC       #42 write ENDL
007D FFFC 001B            PUSHA     SB( 28) memory[EA = 0X00F3]
0081 FFFA 00F3 001B       PUSH      SB( 28) memory[EA = 0X00F3] = 0X0003
0085 FFF8 0003 00F3  001B PUSH      #memory[EA = 0X0087] = 0X0001
0089 FFF6 0001 0003  00F3 ADDI      0X0004 = 0X0003 + 0X0001
008A FFF8 0004 00F3  001B MAKEDUP   duplicate 0X0004
008B FFF6 0004 0004  00F3 POP       @SP(  2) memory[EA = 0X00F3 = memory[0XFFFC]] = 0X0004
008F FFF8 0004 00F3  001B SWAP      0X00F3 <--> 0X0004
0090 FFF8 00F3 0004  001B DISCARD   #1 words from top-of-stack
0093 FFFA 0004 001B       DISCARD   #1 words from top-of-stack
0096 FFFC 001B            JMP       0X0055
0055 FFFC 001B            PUSH      SB( 28) memory[EA = 0X00F3] = 0X0004
0059 FFFA 0004 001B       PUSH      SB( 29) memory[EA = 0X00F5] = 0X0005
005D FFF8 0005 0004  001B CMPI      0X0004 ? 0X0005 LEG = 100
005E FFFC 001B            JMPL      0X0068 LEG = 100
0068 FFFC 001B            PUSH      #memory[EA = 0X006A] = 0XFFFF
006C FFFA FFFF 001B       SETT      T = 1
006D FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
0070 FFFC 001B            JMPNT     0X0099 T = 1
0073 FFFC 001B            PUSHA     SB( 35) memory[EA = 0X0101]
0077 FFFA 0101 001B       SVC       #51 write string
Arthur Daryl Hanna
007A FFFC 001B            SVC       #42 write ENDL
007D FFFC 001B            PUSHA     SB( 28) memory[EA = 0X00F3]
0081 FFFA 00F3 001B       PUSH      SB( 28) memory[EA = 0X00F3] = 0X0004
0085 FFF8 0004 00F3  001B PUSH      #memory[EA = 0X0087] = 0X0001
0089 FFF6 0001 0004  00F3 ADDI      0X0005 = 0X0004 + 0X0001
008A FFF8 0005 00F3  001B MAKEDUP   duplicate 0X0005
008B FFF6 0005 0005  00F3 POP       @SP(  2) memory[EA = 0X00F3 = memory[0XFFFC]] = 0X0005
008F FFF8 0005 00F3  001B SWAP      0X00F3 <--> 0X0005
0090 FFF8 00F3 0005  001B DISCARD   #1 words from top-of-stack
0093 FFFA 0005 001B       DISCARD   #1 words from top-of-stack
0096 FFFC 001B            JMP       0X0055
0055 FFFC 001B            PUSH      SB( 28) memory[EA = 0X00F3] = 0X0005
0059 FFFA 0005 001B       PUSH      SB( 29) memory[EA = 0X00F5] = 0X0005
005D FFF8 0005 0005  001B CMPI      0X0005 ? 0X0005 LEG = 010
005E FFFC 001B            JMPL      0X0068 LEG = 010
0061 FFFC 001B            PUSH      #memory[EA = 0X0063] = 0X0000
0065 FFFA 0000 001B       JMP       0X006C
006C FFFA 0000 001B       SETT      T = 0
006D FFFA 0000 001B       DISCARD   #1 words from top-of-stack
0070 FFFC 001B            JMPNT     0X0099 T = 0
0099 FFFC 001B            RETURN    to 0X001B
001B FFFE                 PUSHA     SB(  0) memory[EA = 0X00BB]
001F FFFC 00BB            SVC       #51 write string
Normal program termination
0022 FFFE                 SVC       #42 write ENDL
0025 FFFE                 PUSH      #memory[EA = 0X0027] = 0X0000
0029 FFFC 0000            SVC       #1 terminate program with status 0, SP = 0XFFFE

