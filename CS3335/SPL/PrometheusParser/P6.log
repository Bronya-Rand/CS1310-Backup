Page   1  P6.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0000               1  ;--------------------------------------------------------------
0X0000               2  ; P6.stm
0X0000               3  ;--------------------------------------------------------------
0X0000               4  ; SVC numbers
0X0000               5  SVC_DONOTHING          EQU       0D0                  ; force context switch
0X0000               6  SVC_TERMINATE          EQU       0D1
0X0000               7  SVC_READ_INTEGER       EQU       0D10
0X0000               8  SVC_WRITE_INTEGER      EQU       0D11
0X0000               9  SVC_READ_FLOAT         EQU       0D20
0X0000              10  SVC_WRITE_FLOAT        EQU       0D21
0X0000              11  SVC_READ_BOOLEAN       EQU       0D30
0X0000              12  SVC_WRITE_BOOLEAN      EQU       0D31
0X0000              13  SVC_READ_CHARACTER     EQU       0D40
0X0000              14  SVC_WRITE_CHARACTER    EQU       0D41
0X0000              15  SVC_WRITE_ENDL         EQU       0D42
0X0000              16  SVC_READ_STRING        EQU       0D50
0X0000              17  SVC_WRITE_STRING       EQU       0D51
0X0000              18  SVC_INITIALIZE_HEAP    EQU       0D90
0X0000              19  SVC_ALLOCATE_BLOCK     EQU       0D91
0X0000              20  SVC_DEALLOCATE_BLOCK   EQU       0D92
0X0000              21  
0X0000              22                         ORG       0X0000
0X0000              23  
0X0000  800003      24                         JMP       PROGRAMMAIN
0X0003              25  ;    1 # P6.honkai
0X0003              26  ;    2 # Weiss Del Carmen
0X0003              27  ;    3 # Stop this madness Dr. Hanna
0X0003              28  ;    4 # No more CCTQs smh...
0X0003              29  ;    5 
0X0003              30  ;    6 Herrscher
0X0003              31  ;    7    Veliona x: Bronya >>
0X0003              32  ; **** =========
0X0003              33  ; **** PROGRAM module (   6)
0X0003              34  ; **** =========
0X0003              35  PROGRAMMAIN            EQU       *
0X0003  0100FFFE    36                         PUSH      #RUNTIMESTACK        ; set SP
0X0007  0A          37                         POPSP     
0X0008  0201011A    38                         PUSHA     STATICDATA           ; set SB
0X000C  0C          39                         POPSB     
0X000D  010001DA    40                         PUSH      #HEAPBASE            ; initialize heap
0X0011  01001000    41                         PUSH      #HEAPSIZE
0X0015  FF005A      42                         SVC       #SVC_INITIALIZE_HEAP
0X0018  A0002C      43                         CALL      PROGRAMBODY0010
0X001B  020A0000    44                         PUSHA     SB:0D0
0X001F  FF0033      45                         SVC       #SVC_WRITE_STRING
0X0022  FF002A      46                         SVC       #SVC_WRITE_ENDL
0X0025  01000000    47                         PUSH      #0D0                 ; terminate with status = 0
0X0029  FF0001      48                         SVC       #SVC_TERMINATE
0X002C              49  
0X002C              50  PROGRAMBODY0010        EQU       *
0X002C              51  ;    8    Veliona y: Bronya >>
0X002C              52  ;    9 
0X002C              53  ;   10    Do
0X002C              54  ;   11       Provide "x? " x >>
0X002C              55  ; **** DO-WHILE statement (  10)
0X002C              56  D0020                  EQU       *
Page   2  P6.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X002C              57  ; **** INPUT statement (  11)
0X002C              58  ;   12    While ( x <> 0 )
0X002C  020A001E    59                         PUSHA     SB:0D30
0X0030  FF0033      60                         SVC       #SVC_WRITE_STRING
0X0033  020A001C    61                         PUSHA     SB:0D28
0X0037  FF000A      62                         SVC       #SVC_READ_INTEGER
0X003A  03050001    63                         POP       @SP:0D1
0X003E  040001      64                         DISCARD   #0D1
0X0041              65  ;   13       Provide "y? " y >>
0X0041  010A001C    66                         PUSH      SB:0D28
0X0045  01000000    67                         PUSH      #0D0
0X0049  70          68                         CMPI      
0X004A  850054      69                         JMPNE     T0040
0X004D  01000000    70                         PUSH      #0X0000
0X0051  800058      71                         JMP       E0050
0X0054  0100FFFF    72  T0040                  PUSH      #0XFFFF
0X0058              73  E0050                  EQU       *
0X0058  74          74                         SETT      
0X0059  040001      75                         DISCARD   #0D1
0X005C  8E00F8      76                         JMPNT     E0030
0X005F              77  ; **** INPUT statement (  13)
0X005F              78  ;   14       If  ( x < y ) Execute
0X005F  020A0023    79                         PUSHA     SB:0D35
0X0063  FF0033      80                         SVC       #SVC_WRITE_STRING
0X0066  020A001D    81                         PUSHA     SB:0D29
0X006A  FF000A      82                         SVC       #SVC_READ_INTEGER
0X006D  03050001    83                         POP       @SP:0D1
0X0071  040001      84                         DISCARD   #0D1
0X0074              85  ; **** IF statement (  14)
0X0074  010A001C    86                         PUSH      SB:0D28
0X0078              87  ;   15          Speak "x  < y", EndL >>
0X0078  010A001D    88                         PUSH      SB:0D29
0X007C  70          89                         CMPI      
0X007D  810087      90                         JMPL      T0060
0X0080  01000000    91                         PUSH      #0X0000
0X0084  80008B      92                         JMP       E0070
0X0087  0100FFFF    93  T0060                  PUSH      #0XFFFF
0X008B              94  E0070                  EQU       *
0X008B  74          95                         SETT      
0X008C  040001      96                         DISCARD   #0D1
0X008F  8E009F      97                         JMPNT     I0090
0X0092              98  ; **** PRINT statement (  15)
0X0092  020A0028    99                         PUSHA     SB:0D40
0X0096  FF0033     100                         SVC       #SVC_WRITE_STRING
0X0099             101  ;   16       ElIf ( x = y ) Execute
0X0099  FF002A     102                         SVC       #SVC_WRITE_ENDL
0X009C  8000F5     103                         JMP       E0080
0X009F             104  I0090                  EQU       *
0X009F  010A001C   105                         PUSH      SB:0D28
0X00A3             106  ;   17          Speak "x  = y", EndL >>
0X00A3  010A001D   107                         PUSH      SB:0D29
0X00A7  70         108                         CMPI      
0X00A8  8200B2     109                         JMPE      T0100
0X00AB  01000000   110                         PUSH      #0X0000
0X00AF  8000B6     111                         JMP       E0110
0X00B2  0100FFFF   112  T0100                  PUSH      #0XFFFF
Page   3  P6.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X00B6             113  E0110                  EQU       *
0X00B6  74         114                         SETT      
0X00B7  040001     115                         DISCARD   #0D1
0X00BA  8E00CA     116                         JMPNT     I0120
0X00BD             117  ; **** PRINT statement (  17)
0X00BD  020A0030   118                         PUSHA     SB:0D48
0X00C1  FF0033     119                         SVC       #SVC_WRITE_STRING
0X00C4             120  ;   18       ElIf ( x > y ) Execute
0X00C4  FF002A     121                         SVC       #SVC_WRITE_ENDL
0X00C7  8000F5     122                         JMP       E0080
0X00CA             123  I0120                  EQU       *
0X00CA  010A001C   124                         PUSH      SB:0D28
0X00CE             125  ;   19          Speak "x  > y", EndL >>
0X00CE  010A001D   126                         PUSH      SB:0D29
0X00D2  70         127                         CMPI      
0X00D3  8300DD     128                         JMPG      T0130
0X00D6  01000000   129                         PUSH      #0X0000
0X00DA  8000E1     130                         JMP       E0140
0X00DD  0100FFFF   131  T0130                  PUSH      #0XFFFF
0X00E1             132  E0140                  EQU       *
0X00E1  74         133                         SETT      
0X00E2  040001     134                         DISCARD   #0D1
0X00E5  8E00F5     135                         JMPNT     I0150
0X00E8             136  ; **** PRINT statement (  19)
0X00E8  020A0038   137                         PUSHA     SB:0D56
0X00EC  FF0033     138                         SVC       #SVC_WRITE_STRING
0X00EF             139  ;   20       Stop
0X00EF             140  ;   21    Stop
0X00EF  FF002A     141                         SVC       #SVC_WRITE_ENDL
0X00F2             142  ;   22 Stop
0X00F2             143  ;   23 
0X00F2  8000F5     144                         JMP       E0080
0X00F5             145  I0150                  EQU       *
0X00F5             146  E0080                  EQU       *
0X00F5  80002C     147                         JMP       D0020
0X00F8             148  E0030                  EQU       *
0X00F8  A1         149                         RETURN    
0X00F9             150  ; **** =========
0X00F9             151  ; **** END (  22)
0X00F9             152  ; **** =========
0X00F9             153  
0X00F9             154  ;------------------------------------------------------------
0X00F9             155  ; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
0X00F9             156  ;------------------------------------------------------------
0X00F9             157  HANDLERUNTIMEERROR     EQU       *
0X00F9  FF002A     158                         SVC       #SVC_WRITE_ENDL
0X00FC  020A0040   159                         PUSHA     SB:0D64
0X0100  FF0033     160                         SVC       #SVC_WRITE_STRING
0X0103  FF000B     161                         SVC       #SVC_WRITE_INTEGER
0X0106  020A0052   162                         PUSHA     SB:0D82
0X010A  FF0033     163                         SVC       #SVC_WRITE_STRING
0X010D  FF000B     164                         SVC       #SVC_WRITE_INTEGER
0X0110  FF002A     165                         SVC       #SVC_WRITE_ENDL
0X0113  01000001   166                         PUSH      #0D1
0X0117  FF0001     167                         SVC       #SVC_TERMINATE
0X011A             168  
Page   4  P6.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X011A             169  ;------------------------------------------------------------
0X011A             170  ; Static allocation of global data and PROGRAM module data
0X011A             171  ;------------------------------------------------------------
0X011A             172  STATICDATA             EQU       *
0X011A  001A001A   173                         DS        "Normal program termination"
0X011E  004E006F
0X0122  0072006D
0X0126  0061006C
0X012A  00200070
0X012E  0072006F
0X0132  00670072
0X0136  0061006D
0X013A  00200074
0X013E  00650072
0X0142  006D0069
0X0146  006E0061
0X014A  00740069
0X014E  006F006E
0X0152             174                         RW        0D1                  ; x
0X0154             175                         RW        0D1                  ; y
0X0156  00030003   176                         DS        "x? "
0X015A  0078003F
0X015E  0020    
0X0160  00030003   177                         DS        "y? "
0X0164  0079003F
0X0168  0020    
0X016A  00060006   178                         DS        "x  < y"
0X016E  00780020
0X0172  0020003C
0X0176  00200079
0X017A  00060006   179                         DS        "x  = y"
0X017E  00780020
0X0182  0020003D
0X0186  00200079
0X018A  00060006   180                         DS        "x  > y"
0X018E  00780020
0X0192  0020003E
0X0196  00200079
0X019A  00100010   181                         DS        "Run-time error #"
0X019E  00520075
0X01A2  006E002D
0X01A6  00740069
0X01AA  006D0065
0X01AE  00200065
0X01B2  00720072
0X01B6  006F0072
0X01BA  00200023
0X01BE  000C000C   182                         DS        " near line #"
0X01C2  0020006E
0X01C6  00650061
0X01CA  00720020
0X01CE  006C0069
0X01D2  006E0065
0X01D6  00200023
0X01DA             183  
0X01DA             184  ;------------------------------------------------------------
Page   5  P6.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X01DA             185  ; Heap space for dynamic memory allocation (to support future SPL syntax)
0X01DA             186  ;------------------------------------------------------------
0X01DA             187  HEAPBASE               EQU       *
0X01DA             188  HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words
0X01DA             189  
0X01DA             190  ;------------------------------------------------------------
0X01DA             191  ; Run-time stack
0X01DA             192  ;------------------------------------------------------------
0X01DA             193  RUNTIMESTACK           EQU       0XFFFE


  PC   SP TOS0 TOS1 TOS2 mnemonic  information
---- ---- ---- ---- ---- --------- ----------------------------------------------
0000 FFFE                 JMP       0X0003
0003 FFFE                 PUSH      #memory[EA = 0X0005] = 0XFFFE
0007 FFFC FFFE            POPSP     SP = 0XFFFE
0008 FFFE                 PUSHA     memory[EA = 0X011A]
000C FFFC 011A            POPSB     SB = 0X011A
000D FFFE                 PUSH      #memory[EA = 0X000F] = 0X01DA
0011 FFFC 01DA            PUSH      #memory[EA = 0X0013] = 0X1000
-------------------------------------------------------------
FREE nodes list
   0X01DA:0X11D9(0X0FFC)
-------------------------------------------------------------
0015 FFFA 1000 01DA       SVC       #90 initialize heap, heapBase = 0X01DA, heapSize = 0X1000 words
0018 FFFE                 CALL      0X002C return to 0X001B
002C FFFC 001B            PUSHA     SB( 30) memory[EA = 0X0156]
0030 FFFA 0156 001B       SVC       #51 write string
0033 FFFC 001B            PUSHA     SB( 28) memory[EA = 0X0152]
x? 6
0037 FFFA 0152 001B       SVC       #10 read integer 0X0006
003A FFF8 0006 0152  001B POP       @SP(  1) memory[EA = 0X0152 = memory[0XFFFC]] = 0X0006
003E FFFA 0152 001B       DISCARD   #1 words from top-of-stack
0041 FFFC 001B            PUSH      SB( 28) memory[EA = 0X0152] = 0X0006
0045 FFFA 0006 001B       PUSH      #memory[EA = 0X0047] = 0X0000
0049 FFF8 0000 0006  001B CMPI      0X0006 ? 0X0000 LEG = 001
004A FFFC 001B            JMPNE     0X0054 LEG = 001
0054 FFFC 001B            PUSH      #memory[EA = 0X0056] = 0XFFFF
0058 FFFA FFFF 001B       SETT      T = 1
0059 FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
005C FFFC 001B            JMPNT     0X00F8 T = 1
005F FFFC 001B            PUSHA     SB( 35) memory[EA = 0X0160]
0063 FFFA 0160 001B       SVC       #51 write string
0066 FFFC 001B            PUSHA     SB( 29) memory[EA = 0X0154]
y? 7
006A FFFA 0154 001B       SVC       #10 read integer 0X0007
006D FFF8 0007 0154  001B POP       @SP(  1) memory[EA = 0X0154 = memory[0XFFFC]] = 0X0007
0071 FFFA 0154 001B       DISCARD   #1 words from top-of-stack
0074 FFFC 001B            PUSH      SB( 28) memory[EA = 0X0152] = 0X0006
0078 FFFA 0006 001B       PUSH      SB( 29) memory[EA = 0X0154] = 0X0007
007C FFF8 0007 0006  001B CMPI      0X0006 ? 0X0007 LEG = 100
007D FFFC 001B            JMPL      0X0087 LEG = 100
0087 FFFC 001B            PUSH      #memory[EA = 0X0089] = 0XFFFF
008B FFFA FFFF 001B       SETT      T = 1
008C FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
008F FFFC 001B            JMPNT     0X009F T = 1
0092 FFFC 001B            PUSHA     SB( 40) memory[EA = 0X016A]
0096 FFFA 016A 001B       SVC       #51 write string
x  < y
0099 FFFC 001B            SVC       #42 write ENDL
009C FFFC 001B            JMP       0X00F5
00F5 FFFC 001B            JMP       0X002C
002C FFFC 001B            PUSHA     SB( 30) memory[EA = 0X0156]
0030 FFFA 0156 001B       SVC       #51 write string
0033 FFFC 001B            PUSHA     SB( 28) memory[EA = 0X0152]
