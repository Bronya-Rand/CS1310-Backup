Page   1  P5.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0000               1  ;--------------------------------------------------------------
0X0000               2  ; P5.stm
0X0000               3  ;--------------------------------------------------------------
0X0000               4  ; SVC numbers
0X0000               5  SVC_DONOTHING          EQU       0D0                  ; force context switch
0X0000               6  SVC_TERMINATE          EQU       0D1
0X0000               7  SVC_READ_INTEGER       EQU       0D10
0X0000               8  SVC_WRITE_INTEGER      EQU       0D11
0X0000               9  SVC_READ_FLOAT         EQU       0D20
0X0000              10  SVC_WRITE_FLOAT        EQU       0D21
0X0000              11  SVC_READ_BOOLEAN       EQU       0D30
0X0000              12  SVC_WRITE_BOOLEAN      EQU       0D31
0X0000              13  SVC_READ_CHARACTER     EQU       0D40
0X0000              14  SVC_WRITE_CHARACTER    EQU       0D41
0X0000              15  SVC_WRITE_ENDL         EQU       0D42
0X0000              16  SVC_READ_STRING        EQU       0D50
0X0000              17  SVC_WRITE_STRING       EQU       0D51
0X0000              18  SVC_INITIALIZE_HEAP    EQU       0D90
0X0000              19  SVC_ALLOCATE_BLOCK     EQU       0D91
0X0000              20  SVC_DEALLOCATE_BLOCK   EQU       0D92
0X0000              21  
0X0000              22                         ORG       0X0000
0X0000              23  
0X0000  800003      24                         JMP       PROGRAMMAIN
0X0003              25  ;    1 # P5.honkai
0X0003              26  ;    2 # Weiss Del Carmen
0X0003              27  ;    3 # IDK why Dr. Hanna wants us to do this
0X0003              28  ;    4 # Stop making us suffer
0X0003              29  ;    5 
0X0003              30  ;    6 Veliona x1: Bronya >>
0X0003              31  ;    7 Luna c1: Bronya := 1,c2: Kiana := True >>
0X0003              32  ;    8 Veliona x2: Bronya,x3: Bronya >>
0X0003              33  ;    9 
0X0003              34  ;   10 Herrscher
0X0003              35  ;   11    Veliona sum: Bronya, x1: Bronya >>
0X0003              36  ; **** =========
0X0003              37  ; **** PROGRAM module (  10)
0X0003              38  ; **** =========
0X0003              39  PROGRAMMAIN            EQU       *
0X0003  0100FFFE    40                         PUSH      #RUNTIMESTACK        ; set SP
0X0007  0A          41                         POPSP     
0X0008  020101B3    42                         PUSHA     STATICDATA           ; set SB
0X000C  0C          43                         POPSB     
0X000D  01000313    44                         PUSH      #HEAPBASE            ; initialize heap
0X0011  01001000    45                         PUSH      #HEAPSIZE
0X0015  FF005A      46                         SVC       #SVC_INITIALIZE_HEAP
0X0018  A0002C      47                         CALL      PROGRAMBODY0010
0X001B  020A0005    48                         PUSHA     SB:0D5
0X001F  FF0033      49                         SVC       #SVC_WRITE_STRING
0X0022  FF002A      50                         SVC       #SVC_WRITE_ENDL
0X0025  01000000    51                         PUSH      #0D0                 ; terminate with status = 0
0X0029  FF0001      52                         SVC       #SVC_TERMINATE
0X002C              53  
0X002C              54  PROGRAMBODY0010        EQU       *
0X002C              55  ;   12    Veliona b1: Kiana,b2: Kiana >>
0X002C              56  ;   13    Luna c3: Bronya := 3,c4: Kiana := False >>
Page   2  P5.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X002C              57  ;   14 
0X002C              58  ;   15    Speak "c1 = ",c1,EndL >>
0X002C              59  ; **** PRINT statement (  15)
0X002C  020A0027    60                         PUSHA     SB:0D39
0X0030  FF0033      61                         SVC       #SVC_WRITE_STRING
0X0033  010A0001    62                         PUSH      SB:0D1
0X0037              63  ;   16    Speak "c2 = ",c2,EndL >>
0X0037  FF000B      64                         SVC       #SVC_WRITE_INTEGER
0X003A  FF002A      65                         SVC       #SVC_WRITE_ENDL
0X003D              66  ; **** PRINT statement (  16)
0X003D  020A002E    67                         PUSHA     SB:0D46
0X0041  FF0033      68                         SVC       #SVC_WRITE_STRING
0X0044  010A0002    69                         PUSH      SB:0D2
0X0048              70  ;   17    Speak "c3 = ",c3,EndL >>
0X0048  FF001F      71                         SVC       #SVC_WRITE_BOOLEAN
0X004B  FF002A      72                         SVC       #SVC_WRITE_ENDL
0X004E              73  ; **** PRINT statement (  17)
0X004E  020A0035    74                         PUSHA     SB:0D53
0X0052  FF0033      75                         SVC       #SVC_WRITE_STRING
0X0055  010A0025    76                         PUSH      SB:0D37
0X0059              77  ;   18    Speak "c4 = ",c4,EndL >>
0X0059  FF000B      78                         SVC       #SVC_WRITE_INTEGER
0X005C  FF002A      79                         SVC       #SVC_WRITE_ENDL
0X005F              80  ; **** PRINT statement (  18)
0X005F  020A003C    81                         PUSHA     SB:0D60
0X0063  FF0033      82                         SVC       #SVC_WRITE_STRING
0X0066  010A0026    83                         PUSH      SB:0D38
0X006A              84  ;   19 
0X006A              85  ;   20 # Generates a static semantic (context-dependent) 
0X006A  FF001F      86                         SVC       #SVC_WRITE_BOOLEAN
0X006D              87  ;   21 #      error when un-commmented. Try it and see!
0X006D              88  ;   22 #   c1 := 2 >>
0X006D              89  ;   23 
0X006D              90  ;   24    x1 := 0 >>
0X006D  FF002A      91                         SVC       #SVC_WRITE_ENDL
0X0070              92  ; **** assignment statement (  24)
0X0070  020A0022    93                         PUSHA     SB:0D34
0X0074              94  ;   25    Provide "x1? " x1 >>
0X0074  01000000    95                         PUSH      #0D0
0X0078  06          96                         MAKEDUP   
0X0079  03050002    97                         POP       @SP:0D2
0X007D  05          98                         SWAP      
0X007E  040001      99                         DISCARD   #0D1
0X0081  040001     100                         DISCARD   #0D1
0X0084             101  ; **** INPUT statement (  25)
0X0084             102  ;   26    Provide x2 >>
0X0084  020A0043   103                         PUSHA     SB:0D67
0X0088  FF0033     104                         SVC       #SVC_WRITE_STRING
0X008B  020A0022   105                         PUSHA     SB:0D34
0X008F  FF000A     106                         SVC       #SVC_READ_INTEGER
0X0092  03050001   107                         POP       @SP:0D1
0X0096  040001     108                         DISCARD   #0D1
0X0099             109  ;   27    sum := x1+x2+c1 >>
0X0099             110  ; **** INPUT statement (  26)
0X0099  020A0003   111                         PUSHA     SB:0D3
0X009D  FF000A     112                         SVC       #SVC_READ_INTEGER
Page   3  P5.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X00A0  03050001   113                         POP       @SP:0D1
0X00A4  040001     114                         DISCARD   #0D1
0X00A7             115  ; **** assignment statement (  27)
0X00A7  020A0021   116                         PUSHA     SB:0D33
0X00AB  010A0022   117                         PUSH      SB:0D34
0X00AF  010A0003   118                         PUSH      SB:0D3
0X00B3             119  ;   28    Speak "x1+x2+c1 = ",sum,EndL >>
0X00B3  20         120                         ADDI      
0X00B4  010A0001   121                         PUSH      SB:0D1
0X00B8  20         122                         ADDI      
0X00B9  06         123                         MAKEDUP   
0X00BA  03050002   124                         POP       @SP:0D2
0X00BE  05         125                         SWAP      
0X00BF  040001     126                         DISCARD   #0D1
0X00C2  040001     127                         DISCARD   #0D1
0X00C5             128  ; **** PRINT statement (  28)
0X00C5  020A0049   129                         PUSHA     SB:0D73
0X00C9  FF0033     130                         SVC       #SVC_WRITE_STRING
0X00CC  010A0021   131                         PUSH      SB:0D33
0X00D0             132  ;   29 
0X00D0             133  ;   30 # test new increment and decrement operators   
0X00D0  FF000B     134                         SVC       #SVC_WRITE_INTEGER
0X00D3             135  ;   31    Speak "x1 = ",x1,", ++x1 = ",++x1,EndL >>
0X00D3  FF002A     136                         SVC       #SVC_WRITE_ENDL
0X00D6             137  ; **** PRINT statement (  31)
0X00D6  020A0056   138                         PUSHA     SB:0D86
0X00DA  FF0033     139                         SVC       #SVC_WRITE_STRING
0X00DD  010A0022   140                         PUSH      SB:0D34
0X00E1  FF000B     141                         SVC       #SVC_WRITE_INTEGER
0X00E4  020A005D   142                         PUSHA     SB:0D93
0X00E8  FF0033     143                         SVC       #SVC_WRITE_STRING
0X00EB  020A0022   144                         PUSHA     SB:0D34
0X00EF             145  ;   32    Speak "x1 = ",x1,", --x1 = ",--x1,EndL >>
0X00EF  01050000   146                         PUSH      @SP:0D0
0X00F3  01000001   147                         PUSH      #0D1
0X00F7  20         148                         ADDI      
0X00F8  03050001   149                         POP       @SP:0D1
0X00FC  01050000   150                         PUSH      @SP:0D0
0X0100  05         151                         SWAP      
0X0101  040001     152                         DISCARD   #0D1
0X0104  FF000B     153                         SVC       #SVC_WRITE_INTEGER
0X0107  FF002A     154                         SVC       #SVC_WRITE_ENDL
0X010A             155  ; **** PRINT statement (  32)
0X010A  020A0068   156                         PUSHA     SB:0D104
0X010E  FF0033     157                         SVC       #SVC_WRITE_STRING
0X0111  010A0022   158                         PUSH      SB:0D34
0X0115  FF000B     159                         SVC       #SVC_WRITE_INTEGER
0X0118  020A006F   160                         PUSHA     SB:0D111
0X011C  FF0033     161                         SVC       #SVC_WRITE_STRING
0X011F  020A0022   162                         PUSHA     SB:0D34
0X0123             163  ;   33 
0X0123             164  ;   34    Provide "b1? " b1 >>
0X0123  01050000   165                         PUSH      @SP:0D0
0X0127  01000001   166                         PUSH      #0D1
0X012B  22         167                         SUBI      
0X012C  03050001   168                         POP       @SP:0D1
Page   4  P5.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0130  01050000   169                         PUSH      @SP:0D0
0X0134  05         170                         SWAP      
0X0135  040001     171                         DISCARD   #0D1
0X0138  FF000B     172                         SVC       #SVC_WRITE_INTEGER
0X013B  FF002A     173                         SVC       #SVC_WRITE_ENDL
0X013E             174  ; **** INPUT statement (  34)
0X013E             175  ;   35    b2 := NOT(b1) OR (c2 XOR c4) >>
0X013E  020A007A   176                         PUSHA     SB:0D122
0X0142  FF0033     177                         SVC       #SVC_WRITE_STRING
0X0145  020A0023   178                         PUSHA     SB:0D35
0X0149  FF001E     179                         SVC       #SVC_READ_BOOLEAN
0X014C  03050001   180                         POP       @SP:0D1
0X0150  040001     181                         DISCARD   #0D1
0X0153             182  ; **** assignment statement (  35)
0X0153  020A0024   183                         PUSHA     SB:0D36
0X0157  010A0023   184                         PUSH      SB:0D35
0X015B  33         185                         NOT       
0X015C  010A0002   186                         PUSH      SB:0D2
0X0160             187  ;   36    Speak "b1 = ",b1,", b2 = ",b2,EndL >>
0X0160  010A0026   188                         PUSH      SB:0D38
0X0164  31         189                         XOR       
0X0165  2F         190                         OR        
0X0166  06         191                         MAKEDUP   
0X0167  03050002   192                         POP       @SP:0D2
0X016B  05         193                         SWAP      
0X016C  040001     194                         DISCARD   #0D1
0X016F  040001     195                         DISCARD   #0D1
0X0172             196  ; **** PRINT statement (  36)
0X0172  020A0080   197                         PUSHA     SB:0D128
0X0176  FF0033     198                         SVC       #SVC_WRITE_STRING
0X0179  010A0023   199                         PUSH      SB:0D35
0X017D  FF001F     200                         SVC       #SVC_WRITE_BOOLEAN
0X0180  020A0087   201                         PUSHA     SB:0D135
0X0184  FF0033     202                         SVC       #SVC_WRITE_STRING
0X0187  010A0024   203                         PUSH      SB:0D36
0X018B             204  ;   37 Stop
0X018B  FF001F     205                         SVC       #SVC_WRITE_BOOLEAN
0X018E             206  ;   38 
0X018E             207  ;   39 
0X018E  FF002A     208                         SVC       #SVC_WRITE_ENDL
0X0191  A1         209                         RETURN    
0X0192             210  ; **** =========
0X0192             211  ; **** END (  37)
0X0192             212  ; **** =========
0X0192             213  
0X0192             214  ;------------------------------------------------------------
0X0192             215  ; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
0X0192             216  ;------------------------------------------------------------
0X0192             217  HANDLERUNTIMEERROR     EQU       *
0X0192  FF002A     218                         SVC       #SVC_WRITE_ENDL
0X0195  020A0090   219                         PUSHA     SB:0D144
0X0199  FF0033     220                         SVC       #SVC_WRITE_STRING
0X019C  FF000B     221                         SVC       #SVC_WRITE_INTEGER
0X019F  020A00A2   222                         PUSHA     SB:0D162
0X01A3  FF0033     223                         SVC       #SVC_WRITE_STRING
0X01A6  FF000B     224                         SVC       #SVC_WRITE_INTEGER
Page   5  P5.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X01A9  FF002A     225                         SVC       #SVC_WRITE_ENDL
0X01AC  01000001   226                         PUSH      #0D1
0X01B0  FF0001     227                         SVC       #SVC_TERMINATE
0X01B3             228  
0X01B3             229  ;------------------------------------------------------------
0X01B3             230  ; Static allocation of global data and PROGRAM module data
0X01B3             231  ;------------------------------------------------------------
0X01B3             232  STATICDATA             EQU       *
0X01B3             233                         RW        0D1                  ; x1
0X01B5  0001       234                         DW        0D1                  ; c1
0X01B7  FFFF       235                         DW        True                 ; c2
0X01B9             236                         RW        0D1                  ; x2
0X01BB             237                         RW        0D1                  ; x3
0X01BD  001A001A   238                         DS        "Normal program termination"
0X01C1  004E006F
0X01C5  0072006D
0X01C9  0061006C
0X01CD  00200070
0X01D1  0072006F
0X01D5  00670072
0X01D9  0061006D
0X01DD  00200074
0X01E1  00650072
0X01E5  006D0069
0X01E9  006E0061
0X01ED  00740069
0X01F1  006F006E
0X01F5             239                         RW        0D1                  ; sum
0X01F7             240                         RW        0D1                  ; x1
0X01F9             241                         RW        0D1                  ; b1
0X01FB             242                         RW        0D1                  ; b2
0X01FD  0003       243                         DW        0D3                  ; c3
0X01FF  0000       244                         DW        False                ; c4
0X0201  00050005   245                         DS        "c1 = "
0X0205  00630031
0X0209  0020003D
0X020D  0020    
0X020F  00050005   246                         DS        "c2 = "
0X0213  00630032
0X0217  0020003D
0X021B  0020    
0X021D  00050005   247                         DS        "c3 = "
0X0221  00630033
0X0225  0020003D
0X0229  0020    
0X022B  00050005   248                         DS        "c4 = "
0X022F  00630034
0X0233  0020003D
0X0237  0020    
0X0239  00040004   249                         DS        "x1? "
0X023D  00780031
0X0241  003F0020
0X0245  000B000B   250                         DS        "x1+x2+c1 = "
0X0249  00780031
0X024D  002B0078
0X0251  0032002B
Page   6  P5.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0255  00630031
0X0259  0020003D
0X025D  0020    
0X025F  00050005   251                         DS        "x1 = "
0X0263  00780031
0X0267  0020003D
0X026B  0020    
0X026D  00090009   252                         DS        ", ++x1 = "
0X0271  002C0020
0X0275  002B002B
0X0279  00780031
0X027D  0020003D
0X0281  0020    
0X0283  00050005   253                         DS        "x1 = "
0X0287  00780031
0X028B  0020003D
0X028F  0020    
0X0291  00090009   254                         DS        ", --x1 = "
0X0295  002C0020
0X0299  002D002D
0X029D  00780031
0X02A1  0020003D
0X02A5  0020    
0X02A7  00040004   255                         DS        "b1? "
0X02AB  00620031
0X02AF  003F0020
0X02B3  00050005   256                         DS        "b1 = "
0X02B7  00620031
0X02BB  0020003D
0X02BF  0020    
0X02C1  00070007   257                         DS        ", b2 = "
0X02C5  002C0020
0X02C9  00620032
0X02CD  0020003D
0X02D1  0020    
0X02D3  00100010   258                         DS        "Run-time error #"
0X02D7  00520075
0X02DB  006E002D
0X02DF  00740069
0X02E3  006D0065
0X02E7  00200065
0X02EB  00720072
0X02EF  006F0072
0X02F3  00200023
0X02F7  000C000C   259                         DS        " near line #"
0X02FB  0020006E
0X02FF  00650061
0X0303  00720020
0X0307  006C0069
0X030B  006E0065
0X030F  00200023
0X0313             260  
0X0313             261  ;------------------------------------------------------------
0X0313             262  ; Heap space for dynamic memory allocation (to support future SPL syntax)
0X0313             263  ;------------------------------------------------------------
0X0313             264  HEAPBASE               EQU       *
Page   7  P5.hoyo

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0313             265  HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words
0X0313             266  
0X0313             267  ;------------------------------------------------------------
0X0313             268  ; Run-time stack
0X0313             269  ;------------------------------------------------------------
0X0313             270  RUNTIMESTACK           EQU       0XFFFE


  PC   SP TOS0 TOS1 TOS2 mnemonic  information
---- ---- ---- ---- ---- --------- ----------------------------------------------
0000 FFFE                 JMP       0X0003
0003 FFFE                 PUSH      #memory[EA = 0X0005] = 0XFFFE
0007 FFFC FFFE            POPSP     SP = 0XFFFE
0008 FFFE                 PUSHA     memory[EA = 0X01B3]
000C FFFC 01B3            POPSB     SB = 0X01B3
000D FFFE                 PUSH      #memory[EA = 0X000F] = 0X0313
0011 FFFC 0313            PUSH      #memory[EA = 0X0013] = 0X1000
-------------------------------------------------------------
FREE nodes list
   0X0313:0X1312(0X0FFC)
-------------------------------------------------------------
0015 FFFA 1000 0313       SVC       #90 initialize heap, heapBase = 0X0313, heapSize = 0X1000 words
0018 FFFE                 CALL      0X002C return to 0X001B
002C FFFC 001B            PUSHA     SB( 39) memory[EA = 0X0201]
0030 FFFA 0201 001B       SVC       #51 write string
0033 FFFC 001B            PUSH      SB(  1) memory[EA = 0X01B5] = 0X0001
0037 FFFA 0001 001B       SVC       #11 write integer
c1 = 1
003A FFFC 001B            SVC       #42 write ENDL
003D FFFC 001B            PUSHA     SB( 46) memory[EA = 0X020F]
0041 FFFA 020F 001B       SVC       #51 write string
0044 FFFC 001B            PUSH      SB(  2) memory[EA = 0X01B7] = 0XFFFF
0048 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
c2 = T
004B FFFC 001B            SVC       #42 write ENDL
004E FFFC 001B            PUSHA     SB( 53) memory[EA = 0X021D]
0052 FFFA 021D 001B       SVC       #51 write string
0055 FFFC 001B            PUSH      SB( 37) memory[EA = 0X01FD] = 0X0003
0059 FFFA 0003 001B       SVC       #11 write integer
c3 = 3
005C FFFC 001B            SVC       #42 write ENDL
005F FFFC 001B            PUSHA     SB( 60) memory[EA = 0X022B]
0063 FFFA 022B 001B       SVC       #51 write string
0066 FFFC 001B            PUSH      SB( 38) memory[EA = 0X01FF] = 0X0000
006A FFFA 0000 001B       SVC       #31 write boolean 0X0000
c4 = F
006D FFFC 001B            SVC       #42 write ENDL
0070 FFFC 001B            PUSHA     SB( 34) memory[EA = 0X01F7]
0074 FFFA 01F7 001B       PUSH      #memory[EA = 0X0076] = 0X0000
0078 FFF8 0000 01F7  001B MAKEDUP   duplicate 0X0000
0079 FFF6 0000 0000  01F7 POP       @SP(  2) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0000
007D FFF8 0000 01F7  001B SWAP      0X01F7 <--> 0X0000
007E FFF8 01F7 0000  001B DISCARD   #1 words from top-of-stack
0081 FFFA 0000 001B       DISCARD   #1 words from top-of-stack
0084 FFFC 001B            PUSHA     SB( 67) memory[EA = 0X0239]
0088 FFFA 0239 001B       SVC       #51 write string
008B FFFC 001B            PUSHA     SB( 34) memory[EA = 0X01F7]
x1? 5
008F FFFA 01F7 001B       SVC       #10 read integer 0X0005
0092 FFF8 0005 01F7  001B POP       @SP(  1) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0005
0096 FFFA 01F7 001B       DISCARD   #1 words from top-of-stack
0099 FFFC 001B            PUSHA     SB(  3) memory[EA = 0X01B9]
? 3
009D FFFA 01B9 001B       SVC       #10 read integer 0X0003
00A0 FFF8 0003 01B9  001B POP       @SP(  1) memory[EA = 0X01B9 = memory[0XFFFC]] = 0X0003
00A4 FFFA 01B9 001B       DISCARD   #1 words from top-of-stack
00A7 FFFC 001B            PUSHA     SB( 33) memory[EA = 0X01F5]
00AB FFFA 01F5 001B       PUSH      SB( 34) memory[EA = 0X01F7] = 0X0005
00AF FFF8 0005 01F5  001B PUSH      SB(  3) memory[EA = 0X01B9] = 0X0003
00B3 FFF6 0003 0005  01F5 ADDI      0X0008 = 0X0005 + 0X0003
00B4 FFF8 0008 01F5  001B PUSH      SB(  1) memory[EA = 0X01B5] = 0X0001
00B8 FFF6 0001 0008  01F5 ADDI      0X0009 = 0X0008 + 0X0001
00B9 FFF8 0009 01F5  001B MAKEDUP   duplicate 0X0009
00BA FFF6 0009 0009  01F5 POP       @SP(  2) memory[EA = 0X01F5 = memory[0XFFFC]] = 0X0009
00BE FFF8 0009 01F5  001B SWAP      0X01F5 <--> 0X0009
00BF FFF8 01F5 0009  001B DISCARD   #1 words from top-of-stack
00C2 FFFA 0009 001B       DISCARD   #1 words from top-of-stack
00C5 FFFC 001B            PUSHA     SB( 73) memory[EA = 0X0245]
00C9 FFFA 0245 001B       SVC       #51 write string
00CC FFFC 001B            PUSH      SB( 33) memory[EA = 0X01F5] = 0X0009
00D0 FFFA 0009 001B       SVC       #11 write integer
x1+x2+c1 = 9
00D3 FFFC 001B            SVC       #42 write ENDL
00D6 FFFC 001B            PUSHA     SB( 86) memory[EA = 0X025F]
00DA FFFA 025F 001B       SVC       #51 write string
00DD FFFC 001B            PUSH      SB( 34) memory[EA = 0X01F7] = 0X0005
00E1 FFFA 0005 001B       SVC       #11 write integer
00E4 FFFC 001B            PUSHA     SB( 93) memory[EA = 0X026D]
00E8 FFFA 026D 001B       SVC       #51 write string
00EB FFFC 001B            PUSHA     SB( 34) memory[EA = 0X01F7]
00EF FFFA 01F7 001B       PUSH      @SP(  0) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0005
00F3 FFF8 0005 01F7  001B PUSH      #memory[EA = 0X00F5] = 0X0001
00F7 FFF6 0001 0005  01F7 ADDI      0X0006 = 0X0005 + 0X0001
00F8 FFF8 0006 01F7  001B POP       @SP(  1) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0006
00FC FFFA 01F7 001B       PUSH      @SP(  0) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0006
0100 FFF8 0006 01F7  001B SWAP      0X01F7 <--> 0X0006
0101 FFF8 01F7 0006  001B DISCARD   #1 words from top-of-stack
0104 FFFA 0006 001B       SVC       #11 write integer
x1 = 5, ++x1 = 6
0107 FFFC 001B            SVC       #42 write ENDL
010A FFFC 001B            PUSHA     SB(104) memory[EA = 0X0283]
010E FFFA 0283 001B       SVC       #51 write string
0111 FFFC 001B            PUSH      SB( 34) memory[EA = 0X01F7] = 0X0006
0115 FFFA 0006 001B       SVC       #11 write integer
0118 FFFC 001B            PUSHA     SB(111) memory[EA = 0X0291]
011C FFFA 0291 001B       SVC       #51 write string
011F FFFC 001B            PUSHA     SB( 34) memory[EA = 0X01F7]
0123 FFFA 01F7 001B       PUSH      @SP(  0) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0006
0127 FFF8 0006 01F7  001B PUSH      #memory[EA = 0X0129] = 0X0001
012B FFF6 0001 0006  01F7 SUBI      0X0005 = 0X0006 - 0X0001
012C FFF8 0005 01F7  001B POP       @SP(  1) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0005
0130 FFFA 01F7 001B       PUSH      @SP(  0) memory[EA = 0X01F7 = memory[0XFFFC]] = 0X0005
0134 FFF8 0005 01F7  001B SWAP      0X01F7 <--> 0X0005
0135 FFF8 01F7 0005  001B DISCARD   #1 words from top-of-stack
0138 FFFA 0005 001B       SVC       #11 write integer
x1 = 6, --x1 = 5
013B FFFC 001B            SVC       #42 write ENDL
013E FFFC 001B            PUSHA     SB(122) memory[EA = 0X02A7]
0142 FFFA 02A7 001B       SVC       #51 write string
0145 FFFC 001B            PUSHA     SB( 35) memory[EA = 0X01F9]
