;--------------------------------------------------------------
; P4.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 # P4.honkai
;    2 # Weiss Del Carmen
;    3 # Something Dr. Hanna did for some reason...
;    4 
;    5 Herrscher
;    6 
;    7 /*----------------------*/
;    8 /* Arithmetic operators */
;    9 /*----------------------*/
;   10    Speak " 1 = ",1,EndL >>
; **** =========
; **** PROGRAM module (   5)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
; **** PRINT statement (  10)
                       PUSHA     SB:0D28
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
;   11    Speak "+2 = ",+2,EndL >>
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  11)
                       PUSHA     SB:0D35
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D2
;   12    Speak "-3 = ",-3,EndL >>
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  12)
                       PUSHA     SB:0D42
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D3
;   13    Speak "Nneg 2 = ",Nneg 2,EndL >>
                       NEGI      
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  13)
                       PUSHA     SB:0D49
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D2
;   14    Speak "Nneg(-3) = ",Nneg(-3),EndL >>
                       SETNZPI   
                       JMPNN     E0020
                       NEGI      
E0020                  EQU       *
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  14)
                       PUSHA     SB:0D60
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D3
                       NEGI      
;   15    Speak "4+5 = ",(4+5),EndL >>
                       SETNZPI   
                       JMPNN     E0030
                       NEGI      
E0030                  EQU       *
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  15)
                       PUSHA     SB:0D73
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D4
                       PUSH      #0D5
                       ADDI      
;   16    Speak "5-4 = ",5-4,EndL >>
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  16)
                       PUSHA     SB:0D81
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D5
                       PUSH      #0D4
;   17    Speak "6*7 = ",6*7,EndL >>
                       SUBI      
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  17)
                       PUSHA     SB:0D89
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D6
                       PUSH      #0D7
;   18    Speak "7/4 = ",7/4,EndL >>
                       MULI      
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  18)
                       PUSHA     SB:0D97
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D7
                       PUSH      #0D4
;   19    Speak "7%4 = ",7%4,EndL >>
                       DIVI      
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  19)
                       PUSHA     SB:0D105
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D7
                       PUSH      #0D4
;   20    Speak "2^3 = ",2^3,EndL >>
                       REMI      
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  20)
                       PUSHA     SB:0D113
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D2
                       PUSH      #0D3
;   21    Speak "2^(3**2) = ",2^(3**2),EndL >>
                       POWI      
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  21)
                       PUSHA     SB:0D121
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D2
                       PUSH      #0D3
                       PUSH      #0D2
                       POWI      
;   22    Speak "(2**3)^2 = ",(2**3)^2,EndL >>
                       POWI      
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  22)
                       PUSHA     SB:0D134
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D2
                       PUSH      #0D3
                       POWI      
                       PUSH      #0D2
;   23 
;   24 /*----------------------*/
                       POWI      
                       SVC       #SVC_WRITE_INTEGER
;   25 /* Comparison operators */
;   26 /*----------------------*/
;   27    Speak "1  < 2 = ",1  < 2,EndL >>
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  27)
                       PUSHA     SB:0D147
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
                       PUSH      #0D2
;   28    Speak "1  = 2 = ",1  = 2,EndL >>
                       CMPI      
                       JMPL      T0040
                       PUSH      #0X0000
                       JMP       E0050
T0040                  PUSH      #0XFFFF
E0050                  EQU       *
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  28)
                       PUSHA     SB:0D158
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
                       PUSH      #0D2
;   29    Speak "1 <= 2 = ",1 <= 2,EndL >>
                       CMPI      
                       JMPE      T0060
                       PUSH      #0X0000
                       JMP       E0070
T0060                  PUSH      #0XFFFF
E0070                  EQU       *
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  29)
                       PUSHA     SB:0D169
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
                       PUSH      #0D2
;   30    Speak "1  > 2 = ",1  > 2,EndL >>
                       CMPI      
                       JMPLE     T0080
                       PUSH      #0X0000
                       JMP       E0090
T0080                  PUSH      #0XFFFF
E0090                  EQU       *
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  30)
                       PUSHA     SB:0D180
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
                       PUSH      #0D2
;   31    Speak "1 != 2 = ",1 != 2,EndL >>
                       CMPI      
                       JMPG      T0100
                       PUSH      #0X0000
                       JMP       E0110
T0100                  PUSH      #0XFFFF
E0110                  EQU       *
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  31)
                       PUSHA     SB:0D191
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
                       PUSH      #0D2
;   32    Speak "1 <> 2 = ",1 <> 2,EndL >>
                       CMPI      
                       JMPNE     T0120
                       PUSH      #0X0000
                       JMP       E0130
T0120                  PUSH      #0XFFFF
E0130                  EQU       *
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  32)
                       PUSHA     SB:0D202
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
                       PUSH      #0D2
;   33    Speak "1 >= 2 = ",1 >= 2,EndL >>
                       CMPI      
                       JMPNE     T0140
                       PUSH      #0X0000
                       JMP       E0150
T0140                  PUSH      #0XFFFF
E0150                  EQU       *
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  33)
                       PUSHA     SB:0D213
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0D1
                       PUSH      #0D2
;   34 
;   35 /*----------------------*/
                       CMPI      
                       JMPGE     T0160
                       PUSH      #0X0000
                       JMP       E0170
T0160                  PUSH      #0XFFFF
E0170                  EQU       *
                       SVC       #SVC_WRITE_BOOLEAN
;   36 /* Logical operators    */
;   37 /*----------------------*/
;   38    Speak " True   OR  True = ", True   OR  True,EndL >>
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  38)
                       PUSHA     SB:0D224
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0XFFFF
                       PUSH      #0XFFFF
;   39    Speak " True   OR False = ", True   OR False,EndL >>
                       OR        
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  39)
                       PUSHA     SB:0D245
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0XFFFF
                       PUSH      #0X0000
;   40    Speak "False  NOR  True = ",False  NOR  True,EndL >>
                       OR        
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  40)
                       PUSHA     SB:0D266
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0X0000
                       PUSH      #0XFFFF
;   41    Speak "False  NOR False = ",False  NOR False,EndL >>
                       NOR       
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  41)
                       PUSHA     SB:0D287
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0X0000
                       PUSH      #0X0000
;   42    Speak " True  XOR  True = ", True  XOR  True,EndL >>
                       NOR       
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  42)
                       PUSHA     SB:0D308
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0XFFFF
                       PUSH      #0XFFFF
;   43    Speak "False  XOR False = ",False  XOR False,EndL >>
                       XOR       
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  43)
                       PUSHA     SB:0D329
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0X0000
                       PUSH      #0X0000
;   44 
;   45    Speak " True  AND  True = ", True  AND  True,EndL >>
                       XOR       
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  45)
                       PUSHA     SB:0D350
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0XFFFF
                       PUSH      #0XFFFF
;   46    Speak " True  AND False = ", True  AND False,EndL >>
                       AND       
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  46)
                       PUSHA     SB:0D371
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0XFFFF
                       PUSH      #0X0000
;   47    Speak "False NAND  True = ",False NAND  True,EndL >>
                       AND       
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  47)
                       PUSHA     SB:0D392
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0X0000
                       PUSH      #0XFFFF
;   48    Speak "False NAND False = ",False NAND False,EndL >>
                       NAND      
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  48)
                       PUSHA     SB:0D413
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0X0000
                       PUSH      #0X0000
;   49 
;   50    Speak "NOT False = ",NOT False,EndL >>
                       NAND      
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  50)
                       PUSHA     SB:0D434
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0X0000
;   51    Speak "NOT  True = ",NOT  True,EndL >>
                       NOT       
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  51)
                       PUSHA     SB:0D448
                       SVC       #SVC_WRITE_STRING
                       PUSH      #0XFFFF
;   52 
;   53 Stop
                       NOT       
                       SVC       #SVC_WRITE_BOOLEAN
;   54 
                       SVC       #SVC_WRITE_ENDL
                       RETURN    
; **** =========
; **** END (  53)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D462
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D480
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       DS        " 1 = "
                       DS        "+2 = "
                       DS        "-3 = "
                       DS        "Nneg 2 = "
                       DS        "Nneg(-3) = "
                       DS        "4+5 = "
                       DS        "5-4 = "
                       DS        "6*7 = "
                       DS        "7/4 = "
                       DS        "7%4 = "
                       DS        "2^3 = "
                       DS        "2^(3**2) = "
                       DS        "(2**3)^2 = "
                       DS        "1  < 2 = "
                       DS        "1  = 2 = "
                       DS        "1 <= 2 = "
                       DS        "1  > 2 = "
                       DS        "1 != 2 = "
                       DS        "1 <> 2 = "
                       DS        "1 >= 2 = "
                       DS        " True   OR  True = "
                       DS        " True   OR False = "
                       DS        "False  NOR  True = "
                       DS        "False  NOR False = "
                       DS        " True  XOR  True = "
                       DS        "False  XOR False = "
                       DS        " True  AND  True = "
                       DS        " True  AND False = "
                       DS        "False NAND  True = "
                       DS        "False NAND False = "
                       DS        "NOT False = "
                       DS        "NOT  True = "
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future SPL syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
