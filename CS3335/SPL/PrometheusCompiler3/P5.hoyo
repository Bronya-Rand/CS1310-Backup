;--------------------------------------------------------------
; P5.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 # P5.honkai
;    2 # Weiss Del Carmen
;    3 # IDK why Dr. Hanna wants us to do this
;    4 # Stop making us suffer
;    5 
;    6 Veliona x1: Bronya >>
;    7 Luna c1: Bronya := 1,c2: Kiana := True >>
;    8 Veliona x2: Bronya,x3: Bronya >>
;    9 
;   10 Herrscher
;   11    Veliona sum: Bronya, x1: Bronya >>
; **** =========
; **** PROGRAM module (  10)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D5
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
;   12    Veliona b1: Kiana,b2: Kiana >>
;   13    Luna c3: Bronya := 3,c4: Kiana := False >>
;   14 
;   15    Speak "c1 = ",c1,EndL >>
; **** PRINT statement (  15)
                       PUSHA     SB:0D39
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D1
;   16    Speak "c2 = ",c2,EndL >>
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  16)
                       PUSHA     SB:0D46
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D2
;   17    Speak "c3 = ",c3,EndL >>
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  17)
                       PUSHA     SB:0D53
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D37
;   18    Speak "c4 = ",c4,EndL >>
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  18)
                       PUSHA     SB:0D60
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D38
;   19 
;   20 # Generates a static semantic (context-dependent) 
                       SVC       #SVC_WRITE_BOOLEAN
;   21 #      error when un-commmented. Try it and see!
;   22 #   c1 := 2 >>
;   23 
;   24    x1 := 0 >>
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement (  24)
                       PUSHA     SB:0D34
;   25    Provide "x1? " x1 >>
                       PUSH      #0D0
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** INPUT statement (  25)
;   26    Provide x2 >>
                       PUSHA     SB:0D67
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D34
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
;   27    sum := x1+x2+c1 >>
; **** INPUT statement (  26)
                       PUSHA     SB:0D3
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** assignment statement (  27)
                       PUSHA     SB:0D33
                       PUSH      SB:0D34
                       PUSH      SB:0D3
;   28    Speak "x1+x2+c1 = ",sum,EndL >>
                       ADDI      
                       PUSH      SB:0D1
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement (  28)
                       PUSHA     SB:0D73
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D33
;   29 
;   30 # test new increment and decrement operators   
                       SVC       #SVC_WRITE_INTEGER
;   31    Speak "x1 = ",x1,", ++x1 = ",++x1,EndL >>
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  31)
                       PUSHA     SB:0D86
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D34
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D93
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D34
;   32    Speak "x1 = ",x1,", --x1 = ",--x1,EndL >>
                       PUSH      @SP:0D0
                       PUSH      #0D1
                       ADDI      
                       POP       @SP:0D1
                       PUSH      @SP:0D0
                       SWAP      
                       DISCARD   #0D1
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  32)
                       PUSHA     SB:0D104
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D34
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D111
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D34
;   33 
;   34    Provide "b1? " b1 >>
                       PUSH      @SP:0D0
                       PUSH      #0D1
                       SUBI      
                       POP       @SP:0D1
                       PUSH      @SP:0D0
                       SWAP      
                       DISCARD   #0D1
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** INPUT statement (  34)
;   35    b2 := NOT(b1) OR (c2 XOR c4) >>
                       PUSHA     SB:0D122
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D35
                       SVC       #SVC_READ_BOOLEAN
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** assignment statement (  35)
                       PUSHA     SB:0D36
                       PUSH      SB:0D35
                       NOT       
                       PUSH      SB:0D2
;   36    Speak "b1 = ",b1,", b2 = ",b2,EndL >>
                       PUSH      SB:0D38
                       XOR       
                       OR        
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement (  36)
                       PUSHA     SB:0D128
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D35
                       SVC       #SVC_WRITE_BOOLEAN
                       PUSHA     SB:0D135
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D36
;   37 Stop
                       SVC       #SVC_WRITE_BOOLEAN
;   38 
;   39 
                       SVC       #SVC_WRITE_ENDL
                       RETURN    
; **** =========
; **** END (  37)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D144
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D162
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       RW        0D1                  ; x1
                       DW        0D1                  ; c1
                       DW        True                 ; c2
                       RW        0D1                  ; x2
                       RW        0D1                  ; x3
                       DS        "Normal program termination"
                       RW        0D1                  ; sum
                       RW        0D1                  ; x1
                       RW        0D1                  ; b1
                       RW        0D1                  ; b2
                       DW        0D3                  ; c3
                       DW        False                ; c4
                       DS        "c1 = "
                       DS        "c2 = "
                       DS        "c3 = "
                       DS        "c4 = "
                       DS        "x1? "
                       DS        "x1+x2+c1 = "
                       DS        "x1 = "
                       DS        ", ++x1 = "
                       DS        "x1 = "
                       DS        ", --x1 = "
                       DS        "b1? "
                       DS        "b1 = "
                       DS        ", b2 = "
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future SPL syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
