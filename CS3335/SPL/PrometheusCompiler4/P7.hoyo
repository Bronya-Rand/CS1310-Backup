;--------------------------------------------------------------
; P7.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 # P7.honkai
;    2 # Weiss Del Carmen
;    3 
;    4 Herrscher
;    5    Veliona x: Bronya, y: Bronya >>
; **** =========
; **** PROGRAM module (   4)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
;    6 
;    7    Provide "x? " x >>
; **** INPUT statement (   7)
;    8    Provide "y? " y >>
                       PUSHA     SB:0D30
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D28
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** INPUT statement (   8)
;    9 
;   10    If ( x < y ) Execute
                       PUSHA     SB:0D35
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D29
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** IF statement (  10)
                       PUSH      SB:0D28
;   11       Speak "x  < y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0020
                       PUSH      #0X0000
                       JMP       E0030
T0020                  PUSH      #0XFFFF
E0030                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0050
; **** PRINT statement (  11)
                       PUSHA     SB:0D40
                       SVC       #SVC_WRITE_STRING
;   12    Stop
;   13 
;   14    If ( x != y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0040
I0050                  EQU       *
E0040                  EQU       *
; **** IF statement (  14)
                       PUSH      SB:0D28
;   15       Speak "x != y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPNE     T0060
                       PUSH      #0X0000
                       JMP       E0070
T0060                  PUSH      #0XFFFF
E0070                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0090
; **** PRINT statement (  15)
                       PUSHA     SB:0D48
                       SVC       #SVC_WRITE_STRING
;   16    Stop
;   17 
;   18    If ( x <> y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0080
I0090                  EQU       *
E0080                  EQU       *
; **** IF statement (  18)
                       PUSH      SB:0D28
;   19       Speak "x <> y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPNE     T0100
                       PUSH      #0X0000
                       JMP       E0110
T0100                  PUSH      #0XFFFF
E0110                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0130
; **** PRINT statement (  19)
                       PUSHA     SB:0D56
                       SVC       #SVC_WRITE_STRING
;   20    Stop
;   21 
;   22    If ( x < y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0120
I0130                  EQU       *
E0120                  EQU       *
; **** IF statement (  22)
                       PUSH      SB:0D28
;   23       Speak "x  < y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0140
                       PUSH      #0X0000
                       JMP       E0150
T0140                  PUSH      #0XFFFF
E0150                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0170
; **** PRINT statement (  23)
                       PUSHA     SB:0D64
                       SVC       #SVC_WRITE_STRING
;   24    Else
;   25       Speak "x >= y",EndL >>
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0160
I0170                  EQU       *
; **** PRINT statement (  25)
                       PUSHA     SB:0D72
                       SVC       #SVC_WRITE_STRING
;   26    Stop
;   27 
;   28    If     ( x < y ) Execute
                       SVC       #SVC_WRITE_ENDL
E0160                  EQU       *
; **** IF statement (  28)
                       PUSH      SB:0D28
;   29       Speak "x  < y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0180
                       PUSH      #0X0000
                       JMP       E0190
T0180                  PUSH      #0XFFFF
E0190                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0210
; **** PRINT statement (  29)
                       PUSHA     SB:0D80
                       SVC       #SVC_WRITE_STRING
;   30    ElIf ( x = y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0200
I0210                  EQU       *
                       PUSH      SB:0D28
;   31       Speak "x  = y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPE      T0220
                       PUSH      #0X0000
                       JMP       E0230
T0220                  PUSH      #0XFFFF
E0230                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0240
; **** PRINT statement (  31)
                       PUSHA     SB:0D88
                       SVC       #SVC_WRITE_STRING
;   32    ElIf ( x > y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0200
I0240                  EQU       *
                       PUSH      SB:0D28
;   33       Speak "x  > y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPG      T0250
                       PUSH      #0X0000
                       JMP       E0260
T0250                  PUSH      #0XFFFF
E0260                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0270
; **** PRINT statement (  33)
                       PUSHA     SB:0D96
                       SVC       #SVC_WRITE_STRING
;   34    Stop
;   35 
;   36    If     ( x < y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0200
I0270                  EQU       *
E0200                  EQU       *
; **** IF statement (  36)
                       PUSH      SB:0D28
;   37       Speak "x  < y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0280
                       PUSH      #0X0000
                       JMP       E0290
T0280                  PUSH      #0XFFFF
E0290                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0310
; **** PRINT statement (  37)
                       PUSHA     SB:0D104
                       SVC       #SVC_WRITE_STRING
;   38    ElIf ( x = y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0300
I0310                  EQU       *
                       PUSH      SB:0D28
;   39       Speak "x  = y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPE      T0320
                       PUSH      #0X0000
                       JMP       E0330
T0320                  PUSH      #0XFFFF
E0330                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0340
; **** PRINT statement (  39)
                       PUSHA     SB:0D112
                       SVC       #SVC_WRITE_STRING
;   40    ElIf ( x > y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0300
I0340                  EQU       *
                       PUSH      SB:0D28
;   41       Speak "x  > y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPG      T0350
                       PUSH      #0X0000
                       JMP       E0360
T0350                  PUSH      #0XFFFF
E0360                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0370
; **** PRINT statement (  41)
                       PUSHA     SB:0D120
                       SVC       #SVC_WRITE_STRING
;   42    Else
;   43       Speak "***ERROR***",EndL >>
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0300
I0370                  EQU       *
; **** PRINT statement (  43)
                       PUSHA     SB:0D128
                       SVC       #SVC_WRITE_STRING
;   44    Stop
;   45 
;   46    If     ( x = y ) Execute
                       SVC       #SVC_WRITE_ENDL
E0300                  EQU       *
; **** IF statement (  46)
                       PUSH      SB:0D28
;   47       Speak "x  = y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPE      T0380
                       PUSH      #0X0000
                       JMP       E0390
T0380                  PUSH      #0XFFFF
E0390                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0410
; **** PRINT statement (  47)
                       PUSHA     SB:0D141
                       SVC       #SVC_WRITE_STRING
;   48    Else
;   49       If ( x > y ) Execute
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0400
I0410                  EQU       *
; **** IF statement (  49)
                       PUSH      SB:0D28
;   50          Speak "x  > y",EndL >>
                       PUSH      SB:0D29
                       CMPI      
                       JMPG      T0420
                       PUSH      #0X0000
                       JMP       E0430
T0420                  PUSH      #0XFFFF
E0430                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0450
; **** PRINT statement (  50)
                       PUSHA     SB:0D149
                       SVC       #SVC_WRITE_STRING
;   51       Else
;   52          Speak "x  < y",EndL >>
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0440
I0450                  EQU       *
; **** PRINT statement (  52)
                       PUSHA     SB:0D157
                       SVC       #SVC_WRITE_STRING
;   53       Stop
;   54    Stop
                       SVC       #SVC_WRITE_ENDL
;   55 Stop
;   56 
E0440                  EQU       *
E0400                  EQU       *
                       RETURN    
; **** =========
; **** END (  55)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D165
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D183
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       RW        0D1                  ; x
                       RW        0D1                  ; y
                       DS        "x? "
                       DS        "y? "
                       DS        "x  < y"
                       DS        "x != y"
                       DS        "x <> y"
                       DS        "x  < y"
                       DS        "x >= y"
                       DS        "x  < y"
                       DS        "x  = y"
                       DS        "x  > y"
                       DS        "x  < y"
                       DS        "x  = y"
                       DS        "x  > y"
                       DS        "***ERROR***"
                       DS        "x  = y"
                       DS        "x  > y"
                       DS        "x  < y"
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future SPL syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
